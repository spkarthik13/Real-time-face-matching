{"ast":null,"code":"import { BoxWithText } from '../classes/BoxWithText';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { PredictedBox } from '../classes/PredictedBox';\nimport { env } from '../env';\nimport { round } from '../utils';\nimport { drawBox } from './drawBox';\nimport { drawText } from './drawText';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getDefaultDrawOptions } from './getDefaultDrawOptions';\nimport { resolveInput } from './resolveInput';\nexport function drawDetection(canvasArg, detection, options) {\n  var Canvas = env.getEnv().Canvas;\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof Canvas)) {\n    throw new Error('drawDetection - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var detectionArray = Array.isArray(detection) ? detection : [detection];\n  detectionArray.forEach(function (det) {\n    var _a = det instanceof ObjectDetection ? det.box : det,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n\n    var drawOptions = getDefaultDrawOptions(options);\n    var ctx = getContext2dOrThrow(canvas);\n    drawBox(ctx, x, y, width, height, drawOptions);\n    var withScore = drawOptions.withScore;\n    var text = det instanceof BoxWithText ? det.text : withScore && det instanceof PredictedBox ? \"\" + round(det.score) : det instanceof ObjectDetection ? \"\" + det.className + (withScore ? \" (\" + round(det.score) + \")\" : '') : '';\n\n    if (text) {\n      drawText(ctx, x, y + height, text, drawOptions);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}