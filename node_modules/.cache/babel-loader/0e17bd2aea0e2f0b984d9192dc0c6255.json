{"ast":null,"code":"import { env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput } from 'tfjs-image-recognition-base';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { drawContour } from './drawContour';\nexport function drawLandmarks(canvasArg, faceLandmarks, options) {\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof env.getEnv().Canvas)) {\n    throw new Error('drawLandmarks - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var drawOptions = Object.assign(getDefaultDrawOptions(options), options || {});\n  var drawLines = Object.assign({\n    drawLines: false\n  }, options || {}).drawLines;\n  var ctx = getContext2dOrThrow(canvas);\n  var lineWidth = drawOptions.lineWidth,\n      _a = drawOptions.color,\n      color = _a === void 0 ? 'blue' : _a;\n  var faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks];\n  faceLandmarksArray.forEach(function (landmarks) {\n    if (drawLines && landmarks instanceof FaceLandmarks68) {\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      drawContour(ctx, landmarks.getJawOutline());\n      drawContour(ctx, landmarks.getLeftEyeBrow());\n      drawContour(ctx, landmarks.getRightEyeBrow());\n      drawContour(ctx, landmarks.getNose());\n      drawContour(ctx, landmarks.getLeftEye(), true);\n      drawContour(ctx, landmarks.getRightEye(), true);\n      drawContour(ctx, landmarks.getMouth(), true);\n      return;\n    } // else draw points\n\n\n    var ptOffset = lineWidth / 2;\n    ctx.fillStyle = color;\n    landmarks.positions.forEach(function (pt) {\n      return ctx.fillRect(pt.x - ptOffset, pt.y - ptOffset, lineWidth, lineWidth);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}