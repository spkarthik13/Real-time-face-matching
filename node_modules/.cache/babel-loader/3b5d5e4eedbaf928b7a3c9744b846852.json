{"ast":null,"code":"import { drawText, env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput, round } from 'tfjs-image-recognition-base';\nexport function drawFaceExpressions(canvasArg, faceExpressions, options) {\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof env.getEnv().Canvas)) {\n    throw new Error('drawFaceExpressions - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var drawOptions = Object.assign(getDefaultDrawOptions(options), options || {});\n  var ctx = getContext2dOrThrow(canvas);\n  var _a = drawOptions.primaryColor,\n      primaryColor = _a === void 0 ? 'red' : _a,\n      _b = drawOptions.secondaryColor,\n      secondaryColor = _b === void 0 ? 'blue' : _b,\n      _c = drawOptions.primaryFontSize,\n      primaryFontSize = _c === void 0 ? 22 : _c,\n      _d = drawOptions.secondaryFontSize,\n      secondaryFontSize = _d === void 0 ? 16 : _d,\n      _e = drawOptions.minConfidence,\n      minConfidence = _e === void 0 ? 0.2 : _e;\n  var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\n  faceExpressionsArray.forEach(function (_a) {\n    var position = _a.position,\n        expressions = _a.expressions;\n    var x = position.x,\n        y = position.y;\n    var height = position.height || 0;\n    var sorted = expressions.sort(function (a, b) {\n      return b.probability - a.probability;\n    });\n    var resultsToDisplay = sorted.filter(function (expr) {\n      return expr.probability > minConfidence;\n    });\n    var offset = y + height + resultsToDisplay.length * primaryFontSize > canvas.height ? -(resultsToDisplay.length * primaryFontSize) : 0;\n    resultsToDisplay.forEach(function (expr, i) {\n      var text = expr.expression + \" (\" + round(expr.probability) + \")\";\n      drawText(ctx, x, y + height + i * primaryFontSize + offset, text, {\n        textColor: i === 0 ? primaryColor : secondaryColor,\n        fontSize: i === 0 ? primaryFontSize : secondaryFontSize\n      });\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}